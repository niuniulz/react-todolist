{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","IngItem","props","_useState","useState","content","_useState2","Object","slicedToArray","setContent","react_default","a","createElement","className","type","onClick","changePos","isEdit","value","onChange","e","target","editContent","placeholder","modifyItem","modifyCancel","editClick","delClick","EdItem","checked","disabled","ReactDOM","render","_useState3","_useState4","itemContent","setItemContent","_useState5","JSON","parse","localStorage","getItem","_useState6","inglist","setIngList","_useState7","_useState8","edlist","setEdList","_useState9","stringify","_useState10","val","console","log","copy","push","status","setItem","alert","map","item","index","key","src_IngItem","ingCopy","edCopy","splice","edit","src_EdItem","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02909765.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst IngItem = function (props) {\n  const [content, setContent] = useState(props.content)\n\n  const editContent = (e) => {\n    setContent(e.target.value)\n    props.editContent(e.target.value)\n  }\n\n  return (\n    <div className='item'>\n      <input type='checkbox' onClick={props.changePos} />\n      {props.isEdit ?\n        <input type='text' value={content} onChange={e => editContent(e)} placeholder='请输入待办事项' className='input-text' /> :\n        <span className='item-content'>{props.content}</span>}\n      {props.isEdit ?\n        <span><button onClick={props.modifyItem} className='btn'>保存</button> <button onClick={props.modifyCancel} className='btn'>取消</button></span> :\n        <span><button onClick={props.editClick} className='btn'>编辑</button><button onClick={props.delClick} className='btn'>删除</button></span>}\n    </div>\n  )\n}\n\nconst EdItem = function (props) {\n  return (\n    <div>\n      <input type='checkbox' checked disabled />\n      <span className='item-content'>{props.content}</span>\n    </div>\n  )\n}\n\nconst List = function () {\n  const [itemContent, setItemContent] = useState('')\n  const [inglist, setIngList] = useState(JSON.parse(localStorage.getItem('ing-list')) || [])\n  const [edlist, setEdList] = useState(JSON.parse(localStorage.getItem('ed-list')) || [])\n\n  let copy = JSON.parse(JSON.stringify(inglist))\n\n  let [content, setContent] = useState('')\n\n  const addItem = () => {\n    console.log(content)\n    if (!content) {\n      alert('请输入内容后再添加！')\n      return\n    }\n    let copy = JSON.parse(JSON.stringify(inglist))\n    copy.push({ status: 1, content })\n    setIngList(copy)\n    localStorage.setItem('ing-list', JSON.stringify(copy))\n    setContent('')\n  }\n\n  const edit = function (index) {\n    let copy = JSON.parse(JSON.stringify(inglist))\n    copy[index].isEdit = true\n    setIngList(copy)\n  }\n\n  const editContent = (val) => {\n    console.log(val)\n    setItemContent(val)\n  }\n\n  /**\n   * 将正在进行的任务放入到已完成中\n   */\n  const changePos = (item, index) => {\n    let ingCopy = JSON.parse(JSON.stringify(inglist))\n    let edCopy = JSON.parse(JSON.stringify(edlist))\n    console.log(edCopy, ingCopy)\n    edCopy.push({ status: 2, isEdit: false, content: item.content })\n    ingCopy.splice(index, 1)\n    setIngList(ingCopy)\n    setEdList(edCopy)\n    localStorage.setItem('ing-list', JSON.stringify(ingCopy))\n    localStorage.setItem('ed-list', JSON.stringify(edCopy))\n  }\n\n  const modifyItem = (index) => {\n    console.log('mobifyItem={mobifyItem}')\n    let copy = JSON.parse(JSON.stringify(inglist))\n    copy[index].content = itemContent\n    copy[index].isEdit = false\n    setIngList(copy)\n    localStorage.setItem('ing-list', JSON.stringify(copy))\n  }\n\n  const modifyCancel = index => {\n    let copy = JSON.parse(JSON.stringify(inglist))\n    copy[index].isEdit = false\n    setIngList(copy)\n  }\n\n  const delClick = index => {\n    let copy = JSON.parse(JSON.stringify(inglist))\n    copy.splice(index, 1)\n    setIngList(copy)\n  }\n  \n  return (\n    <div className='list-wrapper'>\n      <div className='add-item'>\n        <input type='text' value={content} onChange={function (e) { setContent(e.target.value) }} className='input-text' />\n        <button className='btn' onClick={addItem}>添加一项</button>\n      </div>\n      <div className='ing-wrapper'>\n        <div>正在进行中</div>\n        <ul className='ing'>\n          {inglist.map((item, index) =>\n            <li className='todo-item' key={index}>\n              <IngItem\n                changePos={() => changePos(item, index)}\n                editClick={() => edit(index)}\n                modifyItem={() => modifyItem(index)}\n                modifyCancel={() => modifyCancel(index)}\n                delClick={() => delClick(index)}\n                editContent={editContent}\n                isEdit={item.isEdit}\n                content={item.content}\n                index={index}\n              ></IngItem></li>)}\n        </ul>\n      </div>\n      <div className='ed-wrapper'>\n        <div>已完成</div>\n        <ul className='ed'>\n          {edlist.map((item, index) => <li className='todo-item' key={index}><EdItem content={item.content} index={index}></EdItem></li>)}\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nReactDOM.render(<div>\n  <List></List>\n</div>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}